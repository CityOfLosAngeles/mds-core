diff --git a/packages/mds-db/index.ts b/packages/mds-db/index.ts
index 6fbd083..539a8bb 100644
--- a/packages/mds-db/index.ts
+++ b/packages/mds-db/index.ts
@@ -98,7 +98,7 @@ async function initialize() {
   return 'postgres'
 }
 
-function commaize(array: any[], quote = `'`, join = ','): any {
+function commaize(array: ReadonlyArray<string>, quote = `'`, join = ','): any {
   return array.map((val: any) => `${stringify(val, quote)}`).join(join)
 }
 
@@ -156,7 +156,7 @@ async function insert(table_name: TABLE_NAME, data: { [x: string]: any }) {
   if (!data) {
     return null
   }
-  let fields = Object.keys(schema.TABLE[table_name])
+  let fields = schema.TABLE_COLUMNS[table_name]
   let query = `INSERT INTO ${String(table_name)} (${commaize(fields, `"`)}) `
   log.info(commaize(fields.map(field => (field.includes('time') ? db_time(data[field]) : data[field]))))
   query += `VALUES (${commaize(fields.map(field => (field.includes('time') ? db_time(data[field]) : data[field])))})`
diff --git a/packages/mds-event-processor/package.json b/packages/mds-event-processor/package.json
index 65b47d9..6d561e5 100644
--- a/packages/mds-event-processor/package.json
+++ b/packages/mds-event-processor/package.json
@@ -8,9 +8,12 @@
   ],
   "scripts": {
     "build": "tsc --build tsconfig.build.json",
-    "start": "node index.js",
-    "pretest": "eslint --ignore-path .gitignore --ignore-pattern static/*.js .",
-    "test": "nyc --check-coverage --lines 70 --per-file mocha --recursive tests"
+    "start": "yarn watch server --type=event",
+    "test": "yarn test:eslint && yarn test:unit",
+    "test:eslint": "eslint --fix --ignore-path ../../.gitignore '**/*.ts'",
+    "test:unit": "PATH_PREFIX=/agency DOTENV_CONFIG_PATH=../../.env nyc --check-coverage --exclude tests --extension .ts --lines 80 --reporter=text --reporter=html ts-mocha --project ../../tsconfig.json --require tsconfig-paths/register --require source-map-support/register --require dotenv/config --recursive --timeout 5000 tests/**/*.ts",
+    "watch": "nodemon --watch '../../packages' --ext 'ts' --ignore '*.d.ts' --exec yarn watch:exec --",
+    "watch:exec": "yarn build && DOTENV_CONFIG_PATH=../../.env ts-node -r dotenv/config"
   },
   "nyc": {
     "exclude": [
diff --git a/packages/mds-event-processor/src/proc-event.ts b/packages/mds-event-processor/src/proc-event.ts
index 3e82836..68b9a22 100644
--- a/packages/mds-event-processor/src/proc-event.ts
+++ b/packages/mds-event-processor/src/proc-event.ts
@@ -1,4 +1,4 @@
-import { data_handler } from './proc.js'
+import { data_handler } from './proc'
 import db from '@mds-core/mds-db'
 import cache from '@mds-core/mds-cache'
 import stream from '@mds-core/mds-stream'
@@ -178,6 +178,7 @@ async function processRaw(type: string, data: any) {
   let device_state: any = {
     type: type.substring(type.lastIndexOf('.') + 1),
     timestamp: data.timestamp,
+    date_timestamp: data.timestamp,
     device_id: data.device_id,
     provider_id: data.provider_id,
     state: null,
diff --git a/packages/mds-event-processor/src/proc-trip.ts b/packages/mds-event-processor/src/proc-trip.ts
index f80711c..75248ec 100644
--- a/packages/mds-event-processor/src/proc-trip.ts
+++ b/packages/mds-event-processor/src/proc-trip.ts
@@ -1,4 +1,4 @@
-import { data_handler } from './proc.js'
+import { data_handler } from './proc'
 import db from '@mds-core/mds-db'
 import cache from '@mds-core/mds-cache'
 import stream from '@mds-core/mds-stream'
diff --git a/packages/mds-event-processor/src/proc.ts b/packages/mds-event-processor/src/proc.ts
index 4564952..4355674 100644
--- a/packages/mds-event-processor/src/proc.ts
+++ b/packages/mds-event-processor/src/proc.ts
@@ -28,18 +28,20 @@ async function data_handler(
   console.log('Creating server...')
   const server = http.createServer((req: any, res: any) => {
     if (req.method === 'POST') {
-      console.log('Recieved POST')
-      let body: any
+      console.log('Received POST')
+      let body: string
+      body = ''
       req.on('data', function(data: string) {
         body += data
       })
       req.on('end', function() {
         let type = req.headers['content-type']
-        if (type.indexOf(';')) {
+        if (type.indexOf(';') >= 0) {
           type = type.substring(0, type.indexOf(';'))
         }
 
-        body = JSON.parse(body)
+        let parsed_body: any
+        parsed_body = JSON.parse(body)
 
         let ce_data: { [x: string]: any } = {}
         if (type === 'application/json') {
@@ -49,11 +51,11 @@ async function data_handler(
             specversion: req.headers['ce-specversion'],
             source: req.headers['ce-source'],
             id: req.headers['ce-id'],
-            data: body
+            data: parsed_body
           }
         } else if (type === 'application/cloudevents+json') {
           // structured
-          ce_data = body
+          ce_data = parsed_body
         }
 
         callback(ce_data.type, ce_data.data)
diff --git a/packages/mds-stream/index.ts b/packages/mds-stream/index.ts
index 22c3af5..374da35 100644
--- a/packages/mds-stream/index.ts
+++ b/packages/mds-stream/index.ts
@@ -51,6 +51,10 @@ function getBinding() {
 }
 
 async function writeCloudEvent(type: string, data: string) {
+  if (!env.SINK) {
+    return
+  }
+
   const cloudevent = new Cloudevent(Cloudevent.specs['0.2'])
     .type(type)
     .source(env.CE_NAME)
