#!/usr/bin/env bash

os=${MDS_OS:-`uname`}
tools=$(dirname ${0})/../tools
istio=${ISTIO_VERSION:-1.2.5}
istioPath=${MDS_ISTIO_PATH:-${tools}/istio-${istio}}
defaultToolchain=${MDS_TOOLCHAIN:-kubernetes-helm,kubefwd,pgcli}
defaultBootstrap=${MDS_BOOTSTRAP:-helm,istio}
defaultInstall=${MDS_INSTALL:-helm,istio,mds}
defaultTest=${MDS_TEST:-unit,integration}
defaultUninstall=${MDS_UNINSTALL:-bookinfo,logging,mds,istio,helm}
defaultForward=${MDS_FORWARD:-default}
defaultToken=${MDS_TOKEN:-dashboard}
defaultReinstall=${MDS_REINSTALL:-helm,istio,mds}
defaultPause=${MDS_PAUSE:-5}
OSX=Darwin
red=`tput setaf 9`
reset=`tput sgr0`

warn() {
  echo "${red}warn: ${1}${reset}"
}

usage() {
  [ "${1}" ] && warn "${1}"

  cat << EOF
usage: $(basename ${0}) [commands]

commands:
  bootstrap                                           : install dependencies; default: ${defaultToolchain},${defaultBootstrap}
  build                                               : build project
  install[:{app[,{app}]}]                             : install specified applications; default: ${defaultInstall}
    helm
    dashboard
    istio
    mds
    logging
    bookinfo
  forward[:{app[,{app}]}]                             : regisgter service host names in the provided namespace(s); default: ${defaultForward}
    default
    kube-system
    istio-system
    logging
    bookinfo-app
  unforward                                           : deregisgter service host names
  test[:unit,integration]                             : preform specified tests; default: ${defaultTest}
  token[:dashboard]                                   : get specified token, copied to copy-paste buffer for osx; default: ${defaultToken}
  open:[app[,{app}]]                                  : opens a browser for the provided application(s)
    dashboard                                         : kubernetes dashboard; see https://github.com/kubernetes/dashboard
    kibana                                            : kibana; see https://www.elastic.co/products/kibana
    prometheus                                        : prometheus; see https://prometheus.io
    jaeger                                            : jaeger; see https://www.jaegertracing.io
    kiali                                             : kiali; see https://www.kiali.io
    bookinfo                                          : bookinfo; see https://istio.io/docs/examples/bookinfo
  cli:[postgresql,redis]                              : create a cli console for the provided service
  uninstall[:{app[,{app}]}]                           : uninstall specified applications; default: ${defaultUninstall}
    helm
    dashboard
    istio
    mds
    logging
    bookinfo
  reinstall[:{app[,{app}]}]                           : reinstall specified applications; default: ${defaultReinstall}
    helm
    dashboard
    istio
    mds
    logging
    bookinfo
  help                                                : help message

example:
  % ./bin/$(basename ${0}) bootstrap build install:mds test:integration forward:kube-system:dashboard open:dashhboard

pre-requisites:
  docker desktop with kubernetes                      : see https://www.docker.com/products/docker-desktop
  bash 4.x                                            : see https://www.gnu.org/software/bash/
  homebrew                                            : see https://brew.sh
  yarn                                                : see https://yarnpkg.com/en/
  nvm                                                 : see https://nvm.sh
  lerna                                               : see https://lerna.js.org
EOF

  [ "${1}" ] && exit 1 || exit 0
}

bootstrap() {
  case "${os}" in
    ${OSX})
      if ! hash brew > /dev/null 2>&1; then
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      fi
      brew bundle --file=$(dirname ${0})/Brewfile || usage "brew bundle failed";;
    *) usage "unsupported os: ${os}";;
  esac

  # todo: boostrap all-the-things

  for y in cypress mocha chai mochawesome; do
    # if [ $(yarn ${y} --version > /dev/null 2>&1) ]; then
    $(yarn ${y} --version > /dev/null 2>&1)
    (( $? != 0 )) && yarn add -W ${y}
  done

  invoke install "$(normalize ${defaultBootstrap})"
}

build()  {
  check ${FUNCNAME[0]}

  for c in clean "" build image; do
    yarn ${c}
  done
}

pause() {
  sleepTime=${1:-${defaultPause}}
  cntr=0

  echo -ne "waiting "

  while (( cntr < ${sleepTime} )); do
    echo -ne "\xF0\x9F\x8D\xBA "
    sleep 3
    cntr=$(($cntr + 3))
  done

  echo ""
}

installHelm() {
  if ! hash helm > /dev/null 2>&1 ; then
    case "${os}" in
      ${OSX}) brew install kubernetes-helm;;
      *) usage "unsupported os: ${os}";;
    esac
  fi

  helm init || usage "helm intialization failure"
  helm repo add stable https://kubernetes-charts.storage.googleapis.com
  helm repo add banzaicloud-stable https://kubernetes-charts.banzaicloud.com
  helm repo add elastic https://helm.elastic.co
  helm repo add istio.io https://storage.googleapis.com/istio-release/releases/1.2.5/charts

  for d in $(find ./charts -type d -depth 1); do
    (cd charts/$(basename ${d}); helm dependency update)
  done

  helm plugin install https://github.com/lrills/helm-unittest
}

installDashboard() {
  check ${FUNCNAME[0]}
  kubectl apply -f \
    https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
  kubectl apply -f charts/dashboard
  helm install --name dahsboard ./charts/dashboard
#   cat <<EOF | kubectl apply -f - || echo "kubernetes dashboard installation failure"
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: admin-user
#   namespace: kube-system
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: admin-user
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: cluster-admin
# subjects:
# - kind: ServiceAccount
#   name: admin-user
#   namespace: kube-system
# EOF
}

installIstio() {
  check ${FUNCNAME[0]}

  if [ ! -d ${istioPath} ]; then
    mkdir -p ${tools}
    (cd ${tools}; curl -L https://git.io/getLatestIstio | ISTIO_VERSION=${istio} sh -)
  fi

  ${istioPath}/bin/istioctl verify-install || warn "istio verify installation failure"

  [[ $(kubectl get namespace istio-system > /dev/null 2>&1) ]] || {
    kubectl create namespace istio-system
    # todo: make kialia|jaeger|grapha install optional
    helm template ${istioPath}/install/kubernetes/helm/istio-init \
      --name istio-init \
      --namespace istio-system | \
      kubectl apply -f -
    pause
    (( $(kubectl -n istio-sytem get crds | grep "istio.io" | wc -l) == 23 )) && \
      echo "istio successfully installed" || usage "istio instllation failure"

    helm template ${istioPath}/install/kubernetes/helm/istio \
      --name istio \
      --namespace istio-system \
      --set tracing.enabled=true \
      --values ${istioPath}/install/kubernetes/helm/istio/values-istio-demo.yaml | \
      kubectl apply -f -
    kubectl label namespace default istio-injection=enabled --overwrite=true
  }
}

installLogging() {
  helm install --name logging ./charts/logging
}

installMds() {
  check ${FUNCNAME[0]}
  # todo: don't create if secret exists
  kubectl create secret generic pg-pass --from-literal 'postgresql-password=Password123#'
  helm install --name mds --namespace mds ./charts/mds
}

installBookinfo() {
  check ${FUNCNAME[0]}

  [[ $(kubectl get namespace bookinfo-app > /dev/null 2>&1) ]] || {
    kubectl create namespace bookinfo-app
    kubectl label namespace bookinfo-app istio-injection=enabled --overwrite=true
    kubectl apply -n bookinfo-app -f ${istioPath}/samples/bookinfo/platform/kube/bookinfo.yaml
    kubectl apply -n bookinfo-app -f ${istioPath}/samples/bookinfo/networking/destination-rule-all.yaml
  }
}

forward() {
  check ${FUNCNAME[0]}

  # todo: forward:logging(kibana),...
  for n in ${@}; do
    echo "sudo --background kubefwd services -n ${n}"
#    echo "sudo --background kubefwd services -n ${n}" -l app=${a}
  done
}

unforward() {
  # todo: support kill-by-service
  sudo pkill kubefwd
}

testUnit() {
  check ${FUNCNAME[0]}

  # todo: make mds unit tests work
  # yarn test

  for c in $(find ./charts -type d -depth 1); do
    helm unittest ./charts/${c}
  done
}

testIntegration() {
  check ${FUNCNAME[0]}

  # todo: provide [ ui | cli ] option
  # yarn cypress open
  yarn cypress run
}

tokenDashboard() {
  case "${os}" in
    ${OSX}) kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | \
      grep admin-user | awk '{print $1}') | grep ^token | cut -d: -f2 | tr -d '[:space:]' | \
      pbcopy;;
    *) kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | \
      grep admin-user | awk '{print $1}') | grep ^token | cut -d: -f2 | tr -d '[:space:]';;
  esac
}

openApplication() {
  for a in ${1}; do
    case "${a}" in
      dashboard) echo "open https://kubernetes-dashboard";;
      kibana) echo "open http://kibana:5601";;
      prometheus) echo "open http://prometheus:9090";;
      jaeger) echo "open http://tracing";;
      kiali) echo "open http://kiali:20001";;
      bookinfo) echo "open http://productpage:9080";;
      *) usage "unknown application: ${a}";;
    esac
  done
}

cliPostgresql() {
  check ${FUNCNAME[0]}

  # note: assumes `kubefwd svc -n default` is running
  pgcli postgres://mdsadmin@mds-postgresql:5432/mds
}

cliRedis() {
  check ${FUNCNAME[0]}

  # note: assumes `kubefwd svc -n default` is running
  redis-cli -u redis://mds-redis-master:6379/0
}

uninstalllNamespaces() {
  for ns in ${@}; do
    [[ $(kubectl get namespace ${1} > /dev/null 2>&1) ]] && {
      kubectl delete namespace ${ns}
    }
  done
}

uninstallBookinfo() {
  uninstalllNamespaces bookinfo-app
}

uninstallMds() {
  check ${FUNCNAME[0]}
  helm delete --purge mds
}

uninstallLogging() {
  check ${FUNCNAME[0]}
  helm delete --purge logging
}

uninstallIstio() {
  [[ $(kubectl get namespace istio-system > /dev/null 2>&1) ]] && {
    check ${FUNCNAME[0]}
    helm template ${istioPath}/install/kubernetes/helm/istio \
      --name istio \
      --namespace istio-system \
      --values ${istioPath}/install/kubernetes/helm/istio/values-istio-demo.yaml | \
        kubectl delete -f -
    kubectl delete namespace istio-system
    kubectl delete -f ${istioPath}/install/kubernetes/helm/istio-init/files
  }
}

uninstallDashboard() {
  kubectl delete deployment kubernetes-dashboard --namespace=kube-system
  kubectl delete service kubernetes-dashboard  --namespace=kube-system
  kubectl delete role kubernetes-dashboard-minimal --namespace=kube-system
  kubectl delete rolebinding kubernetes-dashboard-minimal --namespace=kube-system
  kubectl delete sa kubernetes-dashboard --namespace=kube-system
  kubectl delete secret kubernetes-dashboard-certs --namespace=kube-system
  kubectl delete secret kubernetes-dashboard-key-holder --namespace=kube-system
}

uninstallHelm() {
  case "${os}" in
    ${OSX}) brew uninstall kubernetes-helm;;
    *) usage "unsupported os: ${os}";;
  esac
}

check() {
  case "${1}" in
    build | testIntegration)
      [ hash yarn > /dev/null 2>&1 ] || bootstrap;;
    installHelm | installBookinfo) ;;
    installDashboard | installIstio | installLogging | installMds | testUnit | \
      uninstallMds | uninstallLogging | uninstallIstio)
      [ hash helm > /dev/null 2>&1 ] || installHelm;;
    forward) [ hash kubefwd  > /dev/null 2>&1 ] || bootstrap;;
    cliPostgresql) [ hash pgcli  > /dev/null 2>&1 ] || bootstrap;;
    cliRedis) [ hash redis-cli  > /dev/null 2>&1 ] || bootstrap;;
  esac
}

invoke() {
  for arg in ${2}; do
    ${1}${arg^} || warn "${1} error: ${arg}"
  done
}

normalize() {
  echo "$(echo ${1} | cut -d ':' -f 2 | tr ',' ' ')"
}

if [[ ${#} != 0 ]]; then
  for arg in "${@}"; do
    case "${arg}" in
      bootstrap) bootstrap || warn  "${arg} failure";;
      build) build || usage "${arg} failure";;
      install) arg="${defaultInstall}";&
      install:*) invoke install "$(normalize ${arg})";;
      forward) arg="${defaultForward}";&
      forward:*) forward "$(normalize ${arg})";;
      unforward) unforward;;
      test) arg="${defaultTest}";&
      test:*) invoke test "$(normalize ${arg})";;
      token) arg="${defaultToken}";&
      token:*) invoke token "$(normalize ${arg})";;
      open:*) openApplication "$(normalize ${arg})";;
      cli:*) invoke cli "$(normalize ${arg})";;
      uninstall) arg="${defaultUninstall}";&
      uninstall:*) invoke uninstall "$(normalize ${arg})";;
      reinstall) arg="${defaultReinstall}";&
      reinstall:*)
        invoke uninstall "$(normalize ${arg})"
        invoke install "$(normalize ${arg})";;
      help) usage;;
      *) usage "unknown command: ${arg}"
    esac
  done
else
  usage
fi
