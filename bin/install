#!/usr/bin/env bash

declare -A oses=(
  ["osx"]="Darwin"
  ["linux"]="Linux")
declare -A defaults=(
  ["os"]="${MDS_OS:-`uname`}"
  ["workdir"]="/tmp/mds/tools"
  ["tools"]="${MDS_TOOLCHAIN:-kubernetes-helm,pgcli}"
  ["bootstrap"]="${MDS_BOOTSTRAP:-helm,istio}"
  ["install"]="${MDS_INSTALL:-helm,istio,mds}"
  ["test"]="${MDS_TEST:-unit,integration}"
  ["uninstall"]="${MDS_UNINSTALL:-bookinfo,logging,mds,istio,helm}"
  ["forward"]="${MDS_FORWARD:-default}"
  ["token"]="${MDS_TOKEN:-dashboard}"
  ["reinstall"]="${MDS_REINSTALL:-helm,istio,mds}"
  ["pause"]="${MDS_PAUSE:-3}"
  ["istioVersion"]="${MDS_ISTIO_VERSION:-1.2.5}"
  ["istio"]="${MDS_ISTIO_PATH:-${defaults[workdir]}/istio-${defaults[istioVersion]}}"
  ["values"]="${MDS_VALUES:-values.yaml}")
declare -A repos=(
  ["stable"]="https://kubernetes-charts.storage.googleapis.com"
  ["banzaicloud-stable"]="https://kubernetes-charts.banzaicloud.com"
  ["elastic"]="https://helm.elastic.co"
  ["istio.io"]="https://storage.googleapis.com/istio-release/releases/1.2.5/charts")
declare -A apps=(
  ["mds-agency"]="https://localhost:[port]/agency,mds,app"
  ["mds-audit"]="https://localhost:[port]/audit,mds,app"
  ["mds-compliance"]="https://localhost:[port]/compliance,mds,app"
  ["mds-daily"]="https://localhost:[port]/daily,mds,app"
  ["mds-native"]="https://localhost:[port]/native,mds,app"
  ["mds-policy"]="https://localhost:[port]/provider,mds,app"
  ["mds-provider"]="https://localhost:[port]/provider,mds,app"
  ["dashboard"]="https://localhost:[port],kube-system,k8s-app,kubernetes-dashboard"
  ["kibana"]="http://localhost:[port],logging,app"
  ["prometheus"]="http://localhost:[port],istio-system,app"
  ["jaeger"]="http://localhost:[port],istio-system,app,tracing"
  ["kiali"]="http://localhost:[port],kube-system,app"
  ["bookinfo"]="http://localhost:[port],booking,app")
yellow=`tput setaf 3`
red=`tput setaf 9`
reset=`tput sgr0`

warn() {
  echo "${yellow}warn: ${1}${reset}"
}

error() {
  echo "${red}warn: ${1}${reset}"
}

usage() {
  [ "${1}" ] && warn "${1}"

  cat << EOF
usage: $(basename ${0}) [commands]

commands:
  bootstrap                                           : install dependencies; default: ${defaults[tools]},${defaults[bootstrap]}
  build                                               : build project
  install[:{service[,{service}]}]                     : install specified service; default: ${defaults[install]}
  test[:unit,integration]                             : preform specified tests; default: ${defaults[test]}
  forward[:{app[,{app}]}]                             : register port-forwarding for the provided application(s); default: ${defaults[forward]}
  unforward[:{app[,{app}]}]                           : deregister port-forwarding for the provided application(s)
  token[:dashboard]                                   : get specified token, copied to copy-paste buffer for ${oses[osx]}; default: ${defaults[token]}
  open:[app[,{app}]]                                  : opens a browser for the provided application(s)
  cli:[postgresql,redis]                              : create a cli console for the provided service
  uninstall[:{service[,{service}]}]                   : uninstall specified service(s); default: ${defaults[uninstall]}
  reinstall[:{service[,{service}]}]                   : reinstall specified service(s); default: ${defaults[reinstall]}
  help                                                : help message

where service in:
  helm
  dashboard
  istio
  mds
  logging
  bookinfo

where app in:
  mds-agency
  mds-audit
  mds-compliance
  mds-daily
  mds-native
  mds-policy
  mds-provider
  dashboard                                           : kubernetes dashboard; see https://github.com/kubernetes/dashboard
  kibana                                              : kibana; see https://www.elastic.co/products/kibana
  prometheus                                          : prometheus; see https://prometheus.io
  jaeger                                              : jaeger; see https://www.jaegertracing.io
  kiali                                               : kiali; see https://www.kiali.io
  bookinfo                                            : bookinfo; see https://istio.io/docs/examples/bookinfo

example:
  % ./bin/$(basename ${0}) bootstrap build install:mds test:integration

pre-requisites:
  docker desktop with kubernetes                      : see https://www.docker.com/products/docker-desktop
  bash 4.x                                            : see https://www.gnu.org/software/bash/
  homebrew                                            : see https://brew.sh
  yarn                                                : see https://yarnpkg.com/en/
  nvm                                                 : see https://nvm.sh
  lerna                                               : see https://lerna.js.org
EOF

  [ "${1}" ] && exit 1 || exit 0
}

bootstrap() {
  case "${defaults[os]}" in
    ${oses[osx]} | ${oses[linux]})
      if ! hash brew > /dev/null 2>&1; then
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      fi
	  #todo: consider inline brew installs, bash install hangs on linux
      brew bundle --file=$(dirname ${0})/Brewfile || usage "brew bundle failed";;
    *) usage "unsupported os: ${defaults[os]}";;
  esac

  # todo: boostrap all-the-things

  for y in cypress mocha chai mochawesome; do
    # if [ $(yarn ${y} --version > /dev/null 2>&1) ]; then
    $(yarn ${y} --version > /dev/null 2>&1)
    (( $? != 0 )) && yarn add -W ${y}
  done

  invoke install "$(normalize ${defaults[bootstrap]})"
}

build() {
  check ${FUNCNAME[0]}

  yarn clean
  yarn
  yarn build --ignore=@aws-lambda/*
  yarn image
}

pause() {
  sleepTime=${1:-${defaults[pause]}}
  cntr=0

  echo -ne "waiting "

  while (( cntr < ${sleepTime} )); do
    echo -ne "\xF0\x9F\x8D\xBA "
    sleep 3
    cntr=$(($cntr + 3))
  done

  echo ""
}

helmDependenciesUpdate() {
  for d in $(find ./charts -mindepth 1 -maxdepth 1 -type d); do
    (cd charts/$(basename ${d}); helm dependency update)
  done
}

installHelm() {
  check ${FUNCNAME[0]}

  if ! hash helm > /dev/null 2>&1 ; then
    case "${defaults[os]}" in
      ${oses[osx]} | ${oses[linux]}) brew install kubernetes-helm;;
      *) usage "unsupported os: ${defaults[os]}";;
    esac
  fi

  helm init || usage "helm intialization failure"

  pause 5
  helmDependenciesUpdate
  pause 5

  for d in $(find ./charts -mindepth 1 -maxdepth 1 -type d); do
    (cd charts/$(basename ${d}); helm dependency update)
  done

  [[ $(helm plugin list | grep unittest) ]] || helm plugin install https://github.com/lrills/helm-unittest
}

values() {
  f=$([[ "${1}" == /* ]] && echo ${1} || echo ${2}/${1})

  echo $([ -f ${f} ] && echo "--values ${f}" || echo "")
}

installDashboard() {
  check ${FUNCNAME[0]}

  kubectl apply -f \
    https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
  kubectl apply -f charts/dashboard
  helm install --name dahsboard $(values ${defaults[values]} ./charts/dashboard) ./charts/dashboard
}

installIstio() {
  check ${FUNCNAME[0]}

  if [ ! -d ${defaults[istio]} ]; then
    mkdir -p ${defaults[workdir]}
    (cd ${defaults[workdir]}; curl -L https://git.io/getLatestIstio | ISTIO_VERSION=${defaults[istioVersion]} sh -)
  fi

  ${defaults[istio]}/bin/istioctl verify-install || warn "istio verify installation failure"

  [[ $(kubectl get namespace istio-system > /dev/null 2>&1) ]] || {
    kubectl create namespace istio-system
    # todo: make kialia|jaeger|grapha install optional
    helm template ${defaults[istio]}/install/kubernetes/helm/istio-init \
      --name istio-init \
      --namespace istio-system | \
      kubectl apply -f -

    # todo: should query pod status
    pause 10

    (( $(kubectl -n istio-sytem get crds | grep "istio.io" | wc -l) == 23 )) && \
      echo "istio successfully installed" || usage "istio instllation failure"

    helm template ${defaults[istio]}/install/kubernetes/helm/istio \
      --name istio \
      --namespace istio-system \
      --set tracing.enabled=true \
      --values ${defaults[istio]}/install/kubernetes/helm/istio/values-istio-demo.yaml | \
      kubectl apply -f -
    kubectl label namespace default istio-injection=enabled --overwrite=true
  }
}

installLogging() {
  check ${FUNCNAME[0]}

  [[ $(kubectl get namespace logging > /dev/null 2>&1) ]] || {
    kubectl create namespace logging
    kubectl label namespace logging istio-injection=enabled --overwrite=true
    helm install --name logging --namespace logging $(values ${defaults[values]} ./charts/logging) ./charts/logging
  }
}

installMds() {
  check ${FUNCNAME[0]}

  [[ $(kubectl get namespace mds > /dev/null 2>&1) ]] || {
    kubectl create namespace mds
    kubectl label namespace mds istio-injection=enabled --overwrite=true
    kubectl create secret generic pg-pass --namespace mds --from-literal 'postgresql-password=Password123#'
    helm install --name mds --namespace mds $(values ${defaults[values]} ./charts/mds) ./charts/mds
  }
}

installBookinfo() {
  check ${FUNCNAME[0]}

  [[ $(kubectl get namespace bookinfo-app > /dev/null 2>&1) ]] || {
    kubectl create namespace bookinfo-app
    kubectl label namespace bookinfo-app istio-injection=enabled --overwrite=true
    kubectl apply -n bookinfo-app -f ${defaults[istio]}/samples/bookinfo/platform/kube/bookinfo.yaml
    kubectl apply -n bookinfo-app -f ${defaults[istio]}/samples/bookinfo/networking/destination-rule-all.yaml
  }
}

testUnit() {
  check ${FUNCNAME[0]}

  yarn test

  for c in $(find ./charts -type d -depth 1); do
    helm unittest ./charts/$(basename ${c})
  done
}

testIntegration() {
  check ${FUNCNAME[0]}

  # todo: provide [ ui | cli ] option
  # yarn cypress open
  yarn cypress run
}

get() {
  v=$(echo ${1} | cut -sd ',' -f ${2})
  [ ! -z "${v}" ] && echo ${v} || echo ${3}
}

portForward() {
  app=${apps[${1}]}
  ns=$(get ${app} 2)
  k=$(get ${app} 3)
  v=$(get ${app} 4 ${1})
  a=$(kubectl -n ${ns} get pod -l ${k}=${v} -o jsonpath='{.items[0].metadata.name}')
  p=$(kubectl -n ${ns} get pod -l ${k}=${v} -o jsonpath='{.items[0].spec.containers[0].ports[0].containerPort}')

  echo "kubectl -n ${ns} port-forward ${a} ${p}:${p}"
}

forward() {
  check ${FUNCNAME[0]}

  for a in ${@}; do
    if [ ${apps[${a}]+_} ]; then
      exec $(portForward ${a}) &
    else
      warn "unknown app: ${a}"
    fi
  done
}

unforward() {
  [ ! -z "${@}" ] || ps -aef | grep -E 'kubectl.*port-forward' | grep -v grep | awk '{print $2}' | xargs kill -9

  for a in ${@}; do
    if [ ${apps[${a}]+_} ]; then
      pkill $(portForward ${a})
    else
      warn "unknown app: ${a}"
    fi
  done
}

tokenDashboard() {
  case "${defaults[os]}" in
    ${oses[osx]}) kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | \
      grep admin-user | awk '{print $1}') | grep ^token | cut -d: -f2 | tr -d '[:space:]' | \
      pbcopy;;
    *) kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | \
      grep admin-user | awk '{print $1}') | grep ^token | cut -d: -f2 | tr -d '[:space:]';;
  esac
}

getApp() {
  a=${apps[${1}]}
  u=$(get ${a} 1)
  ns=$(get ${a} 2)
  k=$(get ${a} 3)
  v=$(get ${a} 4 ${1})
  p=$(kubectl -n ${ns} get pod -l ${k}=${v} -o jsonpath='{.items[0].spec.containers[0].ports[0].containerPort}')

  echo ${u/\[port\]/${p}}
}

app() {
  for a in ${1}; do
    if [ ${apps[${a}]+_} ]; then
      case "${defaults[os]}" in
        ${oses[osx]}) open $(getApp ${a});;
        *) usage "unsupported os: ${defaults[os]}";;
      esac
    else
      usage "unknown application: ${a}"
    fi
  done
}

cliPostgresql() {
  check ${FUNCNAME[0]}
  pgcli postgres://mdsadmin@mds-postgresql:5432/mds
}

cliRedis() {
  check ${FUNCNAME[0]}
  redis-cli -u redis://mds-redis-master:6379/0
}

uninstalllNamespaces() {
  for ns in ${@}; do
    [[ $(kubectl get namespace ${1} > /dev/null 2>&1) ]] && kubectl delete namespace ${ns}
  done
}

uninstallBookinfo() {
  uninstalllNamespaces bookinfo-app
}

uninstallMds() {
  check ${FUNCNAME[0]}
  helm delete --purge mds
}

uninstallLogging() {
  check ${FUNCNAME[0]}
  helm delete --purge logging
}

uninstallIstio() {
  [[ $(kubectl get namespace istio-system > /dev/null 2>&1) ]] && {
    check ${FUNCNAME[0]}
    helm template ${defaults[istio]}/install/kubernetes/helm/istio \
      --name istio \
      --namespace istio-system \
      --values ${defaults[istio]}/install/kubernetes/helm/istio/values-istio-demo.yaml | \
        kubectl delete -f -
    kubectl delete namespace istio-system
    kubectl delete -f ${defaults[istio]}/install/kubernetes/helm/istio-init/files
  }
}

uninstallDashboard() {
  kubectl delete deployment kubernetes-dashboard --namespace=kube-system
  kubectl delete service kubernetes-dashboard  --namespace=kube-system
  kubectl delete role kubernetes-dashboard-minimal --namespace=kube-system
  kubectl delete rolebinding kubernetes-dashboard-minimal --namespace=kube-system
  kubectl delete sa kubernetes-dashboard --namespace=kube-system
  kubectl delete secret kubernetes-dashboard-certs --namespace=kube-system
  kubectl delete secret kubernetes-dashboard-key-holder --namespace=kube-system
}

uninstallHelm() {
  case "${defaults[os]}" in
    ${oses[osx]}) brew uninstall kubernetes-helm;;
    *) usage "unsupported os: ${defaults[os]}";;
  esac
}

check() {
  case "${1}" in
    build | testIntegration)
      hash yarn > /dev/null 2>&1 || bootstrap;;
    installHelm | installBookinfo) ;;
    installDashboard | installLogging | installMds)
      hash helm > /dev/null 2>&1 && helmDependenciesUpdate || installHelm;;
    installIstio | testUnit | \
      uninstallDashboard | uninstallMds | uninstallLogging | uninstallIstio)
      hash helm > /dev/null 2>&1 || installHelm;;
    forward | open) ;;
    cliPostgresql) hash pgcli  > /dev/null 2>&1 || bootstrap;;
    cliRedis) hash redis-cli  > /dev/null 2>&1 || bootstrap;;
  esac
}

invoke() {
  for arg in ${2}; do
    ${1}${arg^} || warn "${1} error: ${arg}"
  done
}

normalize() {
  echo ${1} | cut -d ':' -f 2- | tr ',' ' '
}

[[ ! -d ${defaults[workdir]} ]] && mkdir -p ${defaults[workdir]}
[[ ${#} == 0 ]] && usage

for arg in "${@}"; do
  case "${arg}" in
    bootstrap) bootstrap || warn  "${arg} failure";;
    build) build || usage "${arg} failure";;
    install) arg="${defaults[install]}";&
    install:*) invoke install "$(normalize ${arg})";;
    test) arg="${defaults[test]}";&
    test:*) invoke test "$(normalize ${arg})";;
    forward) arg="${defaults[forward]}";&
    forward:*) forward "$(normalize ${arg})";;
    unforward) unforward;;
    unforward:*) unforward "$(normalize ${arg})";;
    token) arg="${defaults[token]}";&
    token:*) invoke token "$(normalize ${arg})";;
    open) usage "specify an application(s) to open";;
    open:*) app "$(normalize ${arg})";;
    cli:*) invoke cli "$(normalize ${arg})";;
    uninstall) arg="${defaults[uninstall]}";&
    uninstall:*) invoke uninstall "$(normalize ${arg})";;
    reinstall) arg="${defaults[reinstall]}";&
    reinstall:*)
    invoke uninstall "$(normalize ${arg})"
    invoke install "$(normalize ${arg})";;
    help) usage;;
    *) usage "unknown command: ${arg}"
  esac
done