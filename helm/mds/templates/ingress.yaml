{{- range $api := .Values.apis }}
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $api.name }}-route
  namespace: {{ $.Release.Namespace }}
spec:
  hosts:
  {{- if $.Values.tls.enabled }}
  - {{ $.Values.tls.domain }}
  {{- else }}
  - "*"
  {{- end }}
  gateways:
  - istio-autogenerated-k8s-ingress.istio-system
  http:
  - match:
    - uri:
        prefix: {{ $api.pathPrefix }}
      {{- if $.Values.tls.enabled }}
      scheme:
        exact: https
      {{- end }}
    route:
    - destination:
        port:
          number: {{ $api.port }}
        host: {{ $api.name }}.{{ $.Release.Namespace}}.svc.cluster.local
    corsPolicy:
      allowOrigin:
      - "*"
      allowMethods:
      - POST
      - GET
      - HEAD
      - OPTIONS
      - PATCH
      - PUT
      allowCredentials: false
      allowHeaders:
      - Content-Type
      - Authorization
      maxAge: "10m"
---
{{- end }}
---
# use istio-autogenerated-k8s-ingress to support certmanager 
# dynamically creating the /.well-known ingress
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-autogenerated-k8s-ingress
  namespace: istio-system
  labels:
    app: gateways
    chart: gateways
    heritage: Tiller
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      protocol: HTTP2
      name: http
    hosts:
    - "*"
{{- if $.Values.tls.enabled }}
  - port:
      number: 443
      protocol: HTTPS
      name: https-default
    tls:
      mode: SIMPLE
      credentialName: ingress-cert
      privateKey: sds
      serverCertificate: sds
    hosts:
    - "*"
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: ingress-cert
  namespace: istio-system
spec:
  secretName: ingress-cert
  issuerRef:
    name: letsencrypt-{{ .Values.tls.production | ternary "prod" "staging" }}
    kind: ClusterIssuer
  commonName: {{ .Values.tls.domain }}
  dnsNames:
  - {{ .Values.tls.domain }}
{{- end }}
